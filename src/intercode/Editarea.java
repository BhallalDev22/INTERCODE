package Intercode;

import java.awt.Color;
import java.awt.Font;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import javax.swing.text.Caret;
import javax.swing.text.Document;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rtextarea.RTextScrollPane;
public class Editarea extends javax.swing.JPanel {

    /**
     * Creates new form NewJPane
     */
    public Editarea() {
        initComponents();
    }
   // String ss = "SyntaxConstants.SYNTAX_STYLE_C";
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        sp = new RTextScrollPane(text);
        text = new RSyntaxTextArea(20,60);
        
        text.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        
          text.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_PYTHON);
        text.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_C);
text.setCodeFoldingEnabled(true);
        text.setColumns(20);
       text.setRows(5);
        sp.setViewportView(text);
        
        
        
        

javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold> 
    public int getCaretPosition(){
        return text.getCaretLineNumber();
    }
    public int getcol(){
    return text.getCaretOffsetFromLineStart();
}
    public int getcount(){
        return text.getLineCount();
    }
    public String getText(){
            return text.getText().toString();
    }

   public void setEditable(boolean b){
        text.setEditable(b);
        return ;
    }

    public int getc(){
         return text.getLineCount();
    }

    public void setfont(int b,String s,Color col){
     Font ff;
     ff = new Font(s,b,12);
     text.setFont(ff);
     text.setForeground(col);
    return ;
    }
      
    public void select(int selectionStart, int selectionEnd) {
        
        int docLength = getDocument().getLength();

        if (selectionStart < 0) {
            selectionStart = 0;
        }
        if (selectionStart > docLength) {
            selectionStart = docLength;
        }
        if (selectionEnd > docLength) {
            selectionEnd = docLength;
        }
        if (selectionEnd < selectionStart) {
            selectionEnd = selectionStart;
        }

        setCaretPosition(selectionStart);
        moveCaretPosition(selectionEnd);
    } 
    public Document getDocument() {
        return model;
    }    
    public void setCaretPosition(int position) {
        Document doc = getDocument();
        if (doc != null) {
            if (position > doc.getLength() || position < 0) {
                throw new IllegalArgumentException("bad position: " + position);
            }
            caret.setDot(position);
        }
    }
    public void moveCaretPosition(int pos) {
        Document doc = getDocument();
        if (doc != null) {
            if (pos > doc.getLength() || pos < 0) {
                throw new IllegalArgumentException("bad position: " + pos);
            }
            caret.moveDot(pos);
        }
    }
    
     public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editarea().setVisible(true);
            }
        });
    }
     public int getlinecount(){System.out.println("Method called...");
         return text.getLineCount();
     }
     
     public boolean get(){
          KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher(){
            @Override
            public boolean dispatchKeyEvent(KeyEvent e) {
               
                return true;
                     }
            
            
        }  );
        return true;
        
     }

    // Variables declaration - do not modify
     private Document model;
     private transient Caret caret;
     public RTextScrollPane sp;  
     //  private javax.swing.JScrollPane jScrollPane1;
     public RSyntaxTextArea text;    
     //private javax.swing.JTextArea jTextArea1;
     // End of variables declaration                   
}