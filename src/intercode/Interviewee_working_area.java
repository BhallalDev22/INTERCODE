/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intercode;

import static intercode.Interviewee_working_area.b;
import static intercode.Interviewer_working_Area.textArea;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.io.*;
import static java.lang.Thread.sleep;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;
import org.fife.ui.autocomplete.*;
import org.fife.ui.rsyntaxtextarea.*;
/**
 *
 * @author Bhanu Pratap Singh
 */
public class Interviewee_working_area extends javax.swing.JFrame {
    static String path = Path.p;
    static boolean state = true;
    public static String ip ;
    public static int count=1;   
    static boolean b;
    static int n,i,j;
    static Socket s1,s2,s3,s4;
    static DataInputStream din1,din2,din3,din4;
    static DataOutputStream dout1,dout2,dout3,dout4;
    public static int port1,port2,port3,port4;
    static   String msgin1;
    static String msgin2="",msgin3="",msgin4="",t1,t2,t3,mail,pp;
    static String mail1;
    static String email;
    static RSyntaxTextArea textArea = new RSyntaxTextArea(25, 80);

    public Interviewee_working_area() {
       fontdialog=new FontSelect1(this);
                
                /**
                 * This method is called from within the constructor to initialize the form.
                 * WARNING: Do NOT modify this code. The content of this method is always
                 * regenerated by the Form Editor.
                 */
                @SuppressWarnings("unchecked")
                // <editor-fold defaultstate="collapsed" desc="Generated Code">
                
         JPanel cp = new JPanel(new BorderLayout());
         textArea.setCodeFoldingEnabled(true);
         RTextScrollPane sp = new RTextScrollPane(textArea);
         cp.add(sp);
         setContentPane(cp);
         setTitle("Text Editor ");
         setDefaultCloseOperation(EXIT_ON_CLOSE);
         pack();
         setLocationRelativeTo(null);
       
          initComponents();
          
          CompletionProvider provider = createCompletionProvider();

      AutoCompletion ac = new AutoCompletion(provider);
      ac.install(textArea);
    
     
    }
    
     private CompletionProvider createCompletionProvider() {

      // A DefaultCompletionProvider is the simplest concrete implementation
      // of CompletionProvider. This provider has no understanding of
      // language semantics. It simply checks the text entered up to the
      // caret position for a match against known completions. This is all
      // that is needed in the majority of cases.
      DefaultCompletionProvider provider = new DefaultCompletionProvider();

      // Add completions for all Java keywords. A BasicCompletion is just
      // a straightforward word completion.
      provider.addCompletion(new BasicCompletion(provider, "abstract"));
      provider.addCompletion(new BasicCompletion(provider, "assert"));
      provider.addCompletion(new BasicCompletion(provider, "boolean"));
      provider.addCompletion(new BasicCompletion(provider, "byte"));
      provider.addCompletion(new BasicCompletion(provider, "case"));
      provider.addCompletion(new BasicCompletion(provider, "catch"));
      provider.addCompletion(new BasicCompletion(provider, "char"));
      provider.addCompletion(new BasicCompletion(provider, "class"));
      provider.addCompletion(new BasicCompletion(provider, "continue"));
      provider.addCompletion(new BasicCompletion(provider, "default"));
      provider.addCompletion(new BasicCompletion(provider, "do"));
      provider.addCompletion(new BasicCompletion(provider, "double"));
      provider.addCompletion(new BasicCompletion(provider, "else"));
      provider.addCompletion(new BasicCompletion(provider, "enum"));
      provider.addCompletion(new BasicCompletion(provider, "extends"));
      provider.addCompletion(new BasicCompletion(provider, "final"));
      provider.addCompletion(new BasicCompletion(provider, "finally"));
      provider.addCompletion(new BasicCompletion(provider, "float"));
      provider.addCompletion(new BasicCompletion(provider, "for"));
      provider.addCompletion(new BasicCompletion(provider, "if"));
      provider.addCompletion(new BasicCompletion(provider, "implements"));
      provider.addCompletion(new BasicCompletion(provider, "import"));
      provider.addCompletion(new BasicCompletion(provider, "instanceof"));
      provider.addCompletion(new BasicCompletion(provider, "int"));
      provider.addCompletion(new BasicCompletion(provider, "interface"));
      provider.addCompletion(new BasicCompletion(provider, "long"));
      provider.addCompletion(new BasicCompletion(provider, "native"));
      provider.addCompletion(new BasicCompletion(provider, "new"));
      provider.addCompletion(new BasicCompletion(provider, "null"));
      provider.addCompletion(new BasicCompletion(provider, "package"));
      provider.addCompletion(new BasicCompletion(provider, "private"));
      provider.addCompletion(new BasicCompletion(provider, "protected"));
      provider.addCompletion(new BasicCompletion(provider, "public"));
      provider.addCompletion(new BasicCompletion(provider, "return"));
      provider.addCompletion(new BasicCompletion(provider, "short"));
      provider.addCompletion(new BasicCompletion(provider, "static"));
      provider.addCompletion(new BasicCompletion(provider, "strictfp"));
      provider.addCompletion(new BasicCompletion(provider, "super"));
      provider.addCompletion(new BasicCompletion(provider, "switch"));
      provider.addCompletion(new BasicCompletion(provider, "synchronized"));
      provider.addCompletion(new BasicCompletion(provider, "this"));
      provider.addCompletion(new BasicCompletion(provider, "throw"));
      provider.addCompletion(new BasicCompletion(provider, "throws"));
      provider.addCompletion(new BasicCompletion(provider, "transient"));
      provider.addCompletion(new BasicCompletion(provider, "try"));
      provider.addCompletion(new BasicCompletion(provider, "void"));
      provider.addCompletion(new BasicCompletion(provider, "volatile"));
      provider.addCompletion(new BasicCompletion(provider, "while"));
      
      
     provider.addCompletion(new BasicCompletion(provider, "asm"));
      provider.addCompletion(new BasicCompletion(provider, "auto"));
      provider.addCompletion(new BasicCompletion(provider, "bool"));
      provider.addCompletion(new BasicCompletion(provider, "break"));
      provider.addCompletion(new BasicCompletion(provider, "const"));
      provider.addCompletion(new BasicCompletion(provider, "const cast"));
      provider.addCompletion(new BasicCompletion(provider, "delete"));
      provider.addCompletion(new BasicCompletion(provider, "dynamic cast"));
      provider.addCompletion(new BasicCompletion(provider, "explicit"));
      provider.addCompletion(new BasicCompletion(provider, "export"));
      provider.addCompletion(new BasicCompletion(provider, "extern"));
      provider.addCompletion(new BasicCompletion(provider, "false"));
      provider.addCompletion(new BasicCompletion(provider, "for"));
      provider.addCompletion(new BasicCompletion(provider, "friend"));
      provider.addCompletion(new BasicCompletion(provider, "goto"));
      provider.addCompletion(new BasicCompletion(provider, "include"));
      provider.addCompletion(new BasicCompletion(provider, "inline"));
      provider.addCompletion(new BasicCompletion(provider, "mutable"));
      provider.addCompletion(new BasicCompletion(provider, "namespace"));
      provider.addCompletion(new BasicCompletion(provider, "operator"));
      provider.addCompletion(new BasicCompletion(provider, "register"));
      provider.addCompletion(new BasicCompletion(provider, "reinterpret cast"));
      provider.addCompletion(new BasicCompletion(provider, "sizeof"));
      provider.addCompletion(new BasicCompletion(provider, "static cast"));
      provider.addCompletion(new BasicCompletion(provider, "struct"));
      provider.addCompletion(new BasicCompletion(provider, "switch"));
      provider.addCompletion(new BasicCompletion(provider, "template"));
      provider.addCompletion(new BasicCompletion(provider, "true"));
      provider.addCompletion(new BasicCompletion(provider, "typedef"));
      provider.addCompletion(new BasicCompletion(provider, "typeid"));
      provider.addCompletion(new BasicCompletion(provider, "typename"));
      provider.addCompletion(new BasicCompletion(provider, "union"));
      provider.addCompletion(new BasicCompletion(provider, "unsigned"));
      provider.addCompletion(new BasicCompletion(provider, "using"));
      provider.addCompletion(new BasicCompletion(provider, "virtual"));
      provider.addCompletion(new BasicCompletion(provider, "warchar t"));
      
      
      provider.addCompletion(new BasicCompletion(provider, "False"));////////
      provider.addCompletion(new BasicCompletion(provider, "is"));
     
      provider.addCompletion(new BasicCompletion(provider, "None"));
      provider.addCompletion(new BasicCompletion(provider, "lambda"));
      provider.addCompletion(new BasicCompletion(provider, "True"));
      provider.addCompletion(new BasicCompletion(provider, "def"));
      provider.addCompletion(new BasicCompletion(provider, "from"));
      provider.addCompletion(new BasicCompletion(provider, "nonlocal"));
      provider.addCompletion(new BasicCompletion(provider, "and"));
      provider.addCompletion(new BasicCompletion(provider, "del"));
      provider.addCompletion(new BasicCompletion(provider, "global"));
      provider.addCompletion(new BasicCompletion(provider, "not"));
      provider.addCompletion(new BasicCompletion(provider, "with"));
      provider.addCompletion(new BasicCompletion(provider, "as"));
      provider.addCompletion(new BasicCompletion(provider, "elif"));
      provider.addCompletion(new BasicCompletion(provider, "pass"));
      provider.addCompletion(new BasicCompletion(provider, "except"));
      provider.addCompletion(new BasicCompletion(provider, "in"));
      provider.addCompletion(new BasicCompletion(provider, "raise"));
     
      
     
      // Add a couple of "shorthand" completions. These completions don't
      // require the input text to be the same thing as the replacement text.
      provider.addCompletion(new ShorthandCompletion(provider, "sysout",
            "System.out.println(", "System.out.println("));
      provider.addCompletion(new ShorthandCompletion(provider, "syserr",
            "System.err.println(", "System.err.println("));

      return provider;

   }
       static void get(){
     try {
            dout2.writeUTF(textArea.getText());
        } catch (IOException ex) {
            Logger.getLogger(Interviewer_working_Area.class.getName()).log(Level.SEVERE, null, ex);
        } }
    
    private static final String JAVA_FILE_LOCATION1 =path+"\\Intercode\\BHANU.c";    //path of files for compilation
    private static final String JAVA_FILE_LOCATION2 =path+"\\Intercode\\BHANU.java";
    private static final String JAVA_FILE_LOCATION3 = path+"\\Intercode\\BHANU.cpp";
    private static final String JAVA_FILE_LOCATION4 = path+"\\Intercode\\PYTHONPROGRAM.py";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        ques = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        lang = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        mess = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        sendtxt = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Output");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 430, 300, 22);

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        output.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                outputKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(output);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(0, 460, 610, 200);

        ques.setEditable(false);
        ques.setColumns(20);
        ques.setRows(5);
        jScrollPane3.setViewportView(ques);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(650, 60, 450, 350);

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(650, 430, 200, 30);

        jButton2.setText("Final Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(920, 430, 180, 30);

        input.setColumns(20);
        input.setRows(5);
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(input);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(650, 510, 450, 140);

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Question");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(650, 30, 450, 30);

        lang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Language", "Java", "C", "C++", "Python" }));
        lang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                langActionPerformed(evt);
            }
        });
        jPanel1.add(lang);
        lang.setBounds(350, 430, 260, 30);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(1200, 92, 30, 580);

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Chat Area");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(1230, 40, 300, 30);

        mess.setColumns(20);
        mess.setRows(5);
        jScrollPane5.setViewportView(mess);

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(1220, 80, 320, 350);

        sendtxt.setColumns(20);
        sendtxt.setRows(5);
        jScrollPane6.setViewportView(sendtxt);

        jPanel1.add(jScrollPane6);
        jScrollPane6.setBounds(1220, 480, 320, 130);

        jButton3.setText("Send");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(1350, 640, 61, 25);

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Type your message here");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(1260, 450, 270, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Custom Input");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(670, 476, 420, 30);

        jButton4.setText("Clear Output Screen");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);
        jButton4.setBounds(450, 660, 160, 25);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/int1561x725.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1560, 700);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1560, 710));

        jMenu2.setText("Edit");

        jMenuItem1.setText("Find");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Replace");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("FindAll");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("jMenuItem4");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed


    }//GEN-LAST:event_formKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      String a = lang.getSelectedItem().toString();
      
      
      if(a.equalsIgnoreCase("C")){              //C compilation code
                try {
          String filename = "BHANU.c";
          FileWriter fileWriter=new FileWriter(filename);
          fileWriter.write(textArea.getText());
          setTitle(filename);
          fileWriter.close();
        } catch (IOException e) {
                      System.out.println("file not found");          
        }
       String command[] = {"gcc",JAVA_FILE_LOCATION1};
       System.out.println("file compiled");
       
       ProcessBuilder processBuilder = new ProcessBuilder(command);
       Process process = null;
  
       try {
            process = processBuilder.start();
            OutputStream out = process.getOutputStream();
            out.write(input.getText().getBytes());
            out.close();

            // Check if any errors or compilation errors encounter then print on Console.
       
           } catch (IOException ex) {
                  Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
           }


        try {
            if( process.getErrorStream().read() != -1 ){
            print("Compilation Errors",process.getErrorStream());
        }  
        } catch (IOException ex) {
                   Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
    }

        if( process.exitValue() == 0 ){
            try {
                 process = new ProcessBuilder(new String[]{"a"}).start();
           } catch (IOException ex) {
                 Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               /** Check if RuntimeException or Errors encounter during execution then print errors on console
                * Otherwise print Output
                */
               if( process.getErrorStream().read() != -1 ){
                   print("Errors ",process.getErrorStream());
               }
               else{
                   print("Output ",process.getInputStream());
               }          } catch (IOException ex) {
               Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
           }

}
    }
      
      
      
        else if(a.equalsIgnoreCase("Java")){
             try {
             String filename = "BHANU.java";
             FileWriter fileWriter=new FileWriter(filename);
             fileWriter.write(textArea.getText());
             setTitle(filename);
             fileWriter.close();
               } catch (IOException e) {
                      System.out.println("file not found");          
               }
      
             String command[] = {"javac",JAVA_FILE_LOCATION2};
            // System.out.println("file compiled");

              ProcessBuilder processBuilder = new ProcessBuilder(command);
              Process process = null;
              try {
                    process = processBuilder.start();
                    OutputStream out = process.getOutputStream();
                    out.write(input.getText().getBytes());
                    out.close();
/**
         * Check if any errors or compilation errors encounter then print on Console.
         */
                } catch (IOException ex) {
                          Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
                }


                 try {
                    if( process.getErrorStream().read() != -1 ){
                    print("Compilation Errors",process.getErrorStream());
                 }   
                 } catch (IOException ex) {
                    Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
                 }

                if( process.exitValue() == 0 ){
                     try {
                           process = new ProcessBuilder(new String[]{"java","-cp","D:\\Desktop\\Intercode","Intercode"}).start();
                           } catch (IOException ex) {
                           Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
                          }
                      try {
         
                       if( process.getErrorStream().read() != -1 ){
                     print("Errors ",process.getErrorStream());
                      }
               else{
                     print("Output ",process.getInputStream());
                 }         
                      } catch (IOException ex) {
                              Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
                }

}
    }
        
        
        
        
    else if(a.equalsIgnoreCase("C++")){
                try {
          String filename = "BHANU.cpp";
          FileWriter fileWriter=new FileWriter(filename);
          fileWriter.write(textArea.getText());
          setTitle(filename);
          fileWriter.close();
        } catch (IOException e) {
                      System.out.println("file not found");          
        }
          String command[] = {"g++",JAVA_FILE_LOCATION3};
          System.out.println("file compiled");
   
          ProcessBuilder processBuilder = new ProcessBuilder(command);
          Process process = null;
        try {
                  process = processBuilder.start();
                  OutputStream out = process.getOutputStream();
                  out.write(input.getText().getBytes());
                  out.close();
                 } catch (IOException ex) {
                          Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
            }


          try {
                if( process.getErrorStream().read() != -1 ){
                 print("Compilation Errors",process.getErrorStream());
              }  
          } catch (IOException ex) {
                 Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
         }

          if( process.exitValue() == 0 ){
           try {
               process = new ProcessBuilder(new String[]{"a"}).start();
           } catch (IOException ex) {
               Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               /** Check if RuntimeException or Errors encounter during execution then print errors on console
                * Otherwise print Output
                */
               if( process.getErrorStream().read() != -1 ){
                   print("Errors ",process.getErrorStream());
               }
               else{
                   print("Output ",process.getInputStream());
               }          } catch (IOException ex) {
               Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
           }

}
    }
   
    
    else if(a.equalsIgnoreCase("Python")){
         try {
          String filename = "PYTHONPROGRAM.py";
        FileWriter fileWriter=new FileWriter(filename);
        fileWriter.write(textArea.getText());
        setTitle(filename);
        fileWriter.close();
        } catch (IOException e) {
                      System.out.println("file not found");          
        }
       String command[] = {"python",JAVA_FILE_LOCATION4};
      // System.out.println("file compiled");

        ProcessBuilder processBuilder = new ProcessBuilder(command);
        Process process = null;
         try {
             process = processBuilder.start();
             OutputStream out = process.getOutputStream();
             out.write(input.getText().getBytes());
             out.close();
/**
         * Check if any errors or compilation errors encounter then print on Console.
         */
         } catch (IOException ex) {
             Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
     }


          try {
              if( process.getErrorStream().read() != -1 ){
                 print("Compilation Errors",process.getErrorStream());
             }   
          } catch (IOException ex) {
                 Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
    }

        if( process.exitValue() == 0 ){
    //process = new ProcessBuilder(new String[]{"a"}).start();
        //   System.out.println("run successfully");
           try {
             
               if( process.getErrorStream().read() != -1 ){
                   print("Errors ",process.getErrorStream());
               }
               else{
                   print("Output ",process.getInputStream());
               }          } catch (IOException ex) {
               Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
           }

    }
    }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        output.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void langActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_langActionPerformed
        String s = lang.getSelectedItem().toString();                   //for syntax colouring
        if(s.equalsIgnoreCase("C")){                                                        
               textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_C);
        }
        else if(s.equalsIgnoreCase("Java")){
               textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        }
        else if(s.equalsIgnoreCase("C++")){
               textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS);
        }
        else if(s.equalsIgnoreCase("Python")){
               textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_PYTHON);
        }

      
    }//GEN-LAST:event_langActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            dout1.writeUTF("asdfghj");
        } catch (IOException ex) {
        }
        textArea.setEditable(false);                 //editor area becomes non editable
        input.setEditable(false);                    //input area becomes non editable
    }//GEN-LAST:event_jButton2ActionPerformed

    private void outputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outputKeyPressed
     
    }//GEN-LAST:event_outputKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
          String msgout="",ss;
          ss= mess.getText();
          msgout=sendtxt.getText().trim();
          dout1.writeUTF(msgout);
          sendtxt.setText("");
          mess.setText(ss+"\nYou:"+msgout);
         }catch(Exception e){} 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyReleased
          try {
            dout3.writeUTF(input.getText());
            } catch (IOException ex) {
            Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
              }
    }//GEN-LAST:event_inputKeyReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
             replace();        //replace
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
             find(0,true,false);       //find 
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
            String txt=JOptionPane.showInputDialog("Find");
             if (txt.equals("")) {
            JOptionPane.showMessageDialog(null,"Enter valid string");
            return;
              }
             highlight(textArea,txt);        //highlighting the found word
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
            callFontSelectDialog();        
    }//GEN-LAST:event_jMenuItem4ActionPerformed
              class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {
              public MyHighlightPainter(Color color) {
              super(color);
              }
              }
              Highlighter.HighlightPainter myHighlightPainter =  new MyHighlightPainter(Color.red);
              public void highlight(JTextComponent textComp,String pattern) {
              removeHighlight(textComp);
              try {
              Highlighter hilite = textComp.getHighlighter();
              Document doc = textComp.getDocument();
              String text=doc.getText(0,doc.getLength());
              int pos=0;
              while ((pos=text.toUpperCase().indexOf(pattern.toUpperCase(),pos))>=0) {
              hilite.addHighlight(pos,pos+pattern.length(),myHighlightPainter);
              pos+=pattern.length();
             } 
             } catch (Exception e) {
            
             }
             }
              public void removeHighlight(JTextComponent textComp) {
              Highlighter hilite = textComp.getHighlighter();
              Highlighter.Highlight[] hilites = hilite.getHighlights();
              for (int i=0;i<hilites.length;i++) {
              if (hilites[i].getPainter() instanceof MyHighlightPainter) {
              hilite.removeHighlight(hilites[i]);
            }
        }
    }
    
              
              
               private void find(int startIndex,boolean newWord,boolean caseSensitive) {
              if (newWord)
              findText=JOptionPane.showInputDialog("Find");
              if (findText!=null&&findText.equals("")) {
                      JOptionPane.showMessageDialog(null,"Enter something to Find");
              return;
                 }
              String find=findText;
              String data=textArea.getText();
              if (!caseSensitive) {
              find=find.toLowerCase();
              data=data.toLowerCase();
              }
              int len=data.length();
              start=startIndex;
               end=start;
              for (int i=start;i<len;i++) {
               char c=data.charAt(i);
               if (c==find.charAt(0)) {
                start=i;
                boolean flag=true;
                for (int j=0;j<find.length();j++,i++) {
                    if (i>=len||data.charAt(i)!=find.charAt(j)) {
                        flag=false;
                        break;
                    }
                }
                if (flag) {
                    end=i;
                    break;
                }
                 }
                 }
                 if (start>=end) {
                 if (startIndex!=0) {
                 find(0,false,caseSensitive);
            }
            else {
                JOptionPane.showMessageDialog(null,findText+" Not Found");
                start=textArea.getCaretPosition();
                end=start;
            }
        }
                   textArea.select(start, end);
            }
                 public void replace()
       {
                findText=JOptionPane.showInputDialog("Find");
                replaceText=JOptionPane.showInputDialog("Replace");
                String d=textArea.getText();
                d=d.replaceAll(findText, replaceText);
                   textArea.setText(d);
       }
       
                 class FixedStack<T> extends Stack<T> {
                 private final int maxSize;
                 public FixedStack(int size) {
        super();
        this.maxSize=size;
    }
    @Override
    public T push(T object) {
        while (this.size()>=maxSize) {
            this.remove(0);
        }
        return super.push(object);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
                KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher(){
           @Override
           public boolean dispatchKeyEvent(KeyEvent e) {
              
               get();
               return false;
               
               
           }
            
            
            
        });
        Interviewee_working_area a = new Interviewee_working_area();
       
       
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {
            @Override
            public boolean dispatchKeyEvent(KeyEvent e) {
            
            return false;}
        });
            
            
      
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interviewee_working_area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interviewee_working_area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interviewee_working_area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interviewee_working_area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
     
        
       
        
        
        
         
         try{
           s2=new Socket(ip,2000);
             System.out.println("Rtextarea connected");
              din2 = new DataInputStream(s2.getInputStream());
           dout2=new DataOutputStream(s2.getOutputStream());
             
             Thread th6;
                    th6 = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            
                            try {
                                while(true){
                                   // System.out.println("waiting for rtaxt...");
                                    msgin2=din2.readUTF();
                                    textArea.setText(msgin2);
                                //    System.out.println(" rsyantax recieved"+msgin2);
                                }
                            } catch (IOException ex) { JOptionPane.showMessageDialog(null, "There may be a chance\n1.Interviewer is not ready\n2.Connection lost in between\n3.Interviewer is taking another interview");
                         
                            Interviewee_afterlogin t = new Interviewee_afterlogin();
                            t.setVisible(true);
                            Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                            
                            
                            
                        }
                    });
             th6.start();
        
           
       }catch(Exception e){
       JOptionPane.showMessageDialog(null, "There may be a chance\n1.Interviewer is not ready\n2.Connection lost in between\n3.Interviewer is taking another interview");
       
       Interviewee_afterlogin t = new Interviewee_afterlogin();
       t.setVisible(true);
       }
         
         
            try{
     
       s1=new Socket(ip,3000);
           System.out.println("message connected");
       din1=new DataInputStream(s1.getInputStream());
       dout1=new DataOutputStream(s1.getOutputStream());
        Thread th7=new Thread(new Runnable() {
               @Override
               public void run() {
                   
                   try {  
                       while(true){
                  String ss;
                  ss= mess.getText();
                  
                               msgin1 =din1.readUTF();
                              mess.setText(ss+"\nInterviewer:"+msgin1);}
                   } catch (IOException ex) {
                       Logger.getLogger(Interviewee_working_area.class.getName()).log(Level.SEVERE, null, ex);
                   }
                          
               }
       });
             th7.start();
      
       }catch(Exception e){}
 try{            
    s3=new Socket(ip,4000);
          System.out.println("mail connected");
       din3=new DataInputStream(s3.getInputStream());
       dout3=new DataOutputStream(s3.getOutputStream());
        email =Login_Signup.ssss2;
       dout3.writeUTF(email);
       System.out.println("mail sent");
    
 }catch(IOException e){
     e.printStackTrace();
 }
           s4=new Socket(ip,5000);
          System.out.println("Questionarea connected");
       din4=new DataInputStream(s4.getInputStream());
       dout4=new DataOutputStream(s4.getOutputStream());
      Thread th5 = new Thread(new Runnable() {
        @Override
        public void run() {
            
              try{
      while(true)
       {
         msgin4=din4.readUTF();
         ques.setText(msgin4);
        
       }
       
      }catch(Exception ex){}  
        }
    });th5.start();
    
       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interviewee_working_area().setVisible(true);
            }
        });
    }
 
    int start,end;
public String findText;
public String replaceText;
 private Interviewer_working_Area.FixedStack<String> prev; 
    
   private void callFontSelectDialog() {
        fontdialog.setVisible(true);
    }  private final FontSelect1 fontdialog;


        
         public Color textColor;
public void setTextFont(Font font) {
        textArea.setFont(font);
        textArea.setForeground(textColor);
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea input;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> lang;
    private static javax.swing.JTextArea mess;
    private javax.swing.JTextArea output;
    private static javax.swing.JTextArea ques;
    private javax.swing.JTextArea sendtxt;
    // End of variables declaration//GEN-END:variables

    private static String string;

    /**
     * Get the value of string
     *
     * @return the value of string
     */
    public static String getString() {
        return string;
    }

    /**
     * Set the value of string
     *
     * @param string new value of string
     */
    public static void setString(String string) {
        Interviewee_working_area.string = string;
    }
    
    private void print(String status,InputStream input) throws IOException{
BufferedReader in = new BufferedReader(new InputStreamReader(input));
System.out.println("************* "+status+"***********************");
//TF.setText("************* "+status+"***********************");
String line = "",k,g;
do{k=output.getText();

 System.out.println(line);

output.setText(k+"\n"+line);
}while((line = in.readLine()) != null );
in.close();
}

}
